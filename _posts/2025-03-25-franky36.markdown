---
title: Building custom mechanical keyboard
date: 2025-03-24T20:55:04+02:00
tags: [keyboards]
---

I've built a custom mechanical keyboard using a split design with a single controller.

![Franky36](/assets/img/franky36/franky36.jpg)

### Design process

Split keyboard with a single controller, making it easier to set up compared to splits with two controllers connected via a TRRS cable.
This design simplifies the wiring and reduces the number of components needed, streamlining the assembly process.

![Design](/assets/img/franky36/design.png)

#### Case

The case was designed using OpenSCAD and 3D printed.
Writing code for the 3D models was also fun.
It's like programming but for 3D objects.
The 3D printing process enabled rapid prototyping and iteration, allowing for adjustments and improvements to be made quickly.
I went through three iterations of the case design, each time refining the layout and making adjustments based on testing.

### Wiring

For the matrix wiring I followed this article: [Handwired Keyboard Build Log](https://www.masterzen.fr/2018/12/16/handwired-keyboard-build-log-part-1/).

The assembly process was straightforward, with the most time-consuming part being the soldering of the diodes and switches.

![Wiring](/assets/img/franky36/wiring.jpg)

Soldering controller and OLED display was easy part of the assembly.

![Controller](/assets/img/franky36/controller.jpg)

Initial version was based on Pro Micro controller, but during testing and debugging micro USB connector was damaged.
And I didn't manage to solder it back.

So it was replaced with a Raspberry Pi 2040 Zero controller.

### Firmware

I used QMK firmware to program the keyboard.

Files structure:

```
keyboards/handwired/franky36/
├── config.h
├── franky36.c
├── halconf.h
├── keyboard.json
├── keymaps
│   └── default
│       └── keymap.c
└── mcuconf.h
```

For the new keyboard it's needed to create a keyboard JSON, that describes the keyboard layout, controller type, matrix pins and features.

```json
{
  "keyboard_name": "franky36",
  [...]
  "features": {
    "oled": true,
    [...]
  },
  [...]
  "matrix_pins": {
    "cols": ["GP9", "GP10", "GP11", "GP12", "GP13", "GP14", "GP15", "GP26", "GP27", "GP28"],
    "rows": ["GP5", "GP4", "GP3", "GP2"]
  },
  "processor": "RP2040",
  [...]
}
```
{: file="keyboard.json"}

Next step is to enable I2C for the OLED display.

```c
#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>
```
{: file="halconf.h"}

Enable I2C in the MCU configuration.

```c
#pragma once

#include_next <mcuconf.h>

#undef RP_I2C_USE_I2C0
#define RP_I2C_USE_I2C0 TRUE
#undef RP_I2C_USE_I2C1
#define RP_I2C_USE_I2C1 FALSE
```
{: file="mcuconf.h"}

Set the I2C pins in the keyboard configuration.

```c
#pragma once

#define I2C_DRIVER I2CD0
#define I2C1_SDA_PIN GP0
#define I2C1_SCL_PIN GP1
```
{: file="config.h"}

Write some code to show layers and modifiers states on the OLED display.

```c
#include QMK_KEYBOARD_H

#ifdef OLED_ENABLE

static void render_logo(void) {
    static const char PROGMEM qmk_logo[] = {
        0x80, 0x81, 0x82, 0x83, 0x84,
        0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0x00, 0x0A, 0x0A
    };

    oled_write_P(qmk_logo, false);
}

static void render_mod_status(uint8_t modifiers) {
    oled_write_P(PSTR("MODS:"), false);
    oled_write_P(PSTR("S"), (modifiers & MOD_MASK_SHIFT));
    oled_write_P(PSTR("C"), (modifiers & MOD_MASK_CTRL));
    oled_write_P(PSTR("A"), (modifiers & MOD_MASK_ALT));
    oled_write_ln_P(PSTR("G"), (modifiers & MOD_MASK_GUI));
    oled_write_ln_P(PSTR(" "), false);
}

static void render_layer_state(void) {
    oled_write_ln_P(PSTR(" "), false);
    oled_write_P("BASE ", layer_state_is(0));
    oled_write_P("LOWER", layer_state_is(1));
    oled_write_P("RAISE", layer_state_is(2));
    oled_write_P("NAV  ", layer_state_is(3));
    oled_write_ln_P(PSTR(" "), false);
}

static void render_capsword_state(bool on) {
    oled_write_ln_P("CAPSW", on);
}

oled_rotation_t oled_init_kb(oled_rotation_t rotation) {
    return OLED_ROTATION_270;
}

bool oled_task_kb(void) {
    if (!oled_task_user()) {
        return false;
    }
    render_logo();
    render_layer_state();
    render_mod_status(get_mods() | get_oneshot_mods());
    render_capsword_state(is_caps_word_on());
    return false;
}

#endif
```
{: file="franky36.c"}

![OLED](/assets/img/franky36/display.jpg)

And add default keymap.

```c
#include QMK_KEYBOARD_H

enum my_layers {
    _BASE = 0,
    _LOWER,
    _RAISE,
    _NAV,
};

#define LOWER          MO(_LOWER)
#define RAISE          MO(_RAISE)
#define NAV            MO(_NAV)

#define OSM_LSFT       OSM(MOD_LSFT)       // One Shot Right Shift

#define KC_SFT_Z       SFT_T(KC_Z)         // Left Shift when held, Z when tapped
#define KC_SFT_SL      RSFT_T(KC_SLSH)     // Right Shift when held, / when tapped

#define KC_SFT_BSLS    RSFT_T(KC_BSLS)     // Right Shift when held, \ when tapped

#define KC_LWR_SPC     LT(_LOWER, KC_SPC)  // Lower layer when held, Space when tapped
#define KC_RSE_BSPC    LT(_RAISE, KC_BSPC) // Raise layer when held, Backspace when tapped
#define KC_NAV_A       LT(_NAV,KC_A)       // Navigation layer when held, A when tapped

#define KC_CMD_TAB     CMD_T(KC_TAB)       // Left Command when held, Tab when tapped
#define KC_CMD_ENT     RCMD_T(KC_ENT)      // Right Command when held, Enter when tapped

#define KC_CTL_ESC     CTL_T(KC_ESC)       // Left Control when held, Escape when tapped
#define KC_OPT_OSM_SFT ROPT_T(OSM_LSFT)    // Right Option when held, One Shot Shift when tapped

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
waffle87 marked this conversation as resolved.
    /*
     * ┌───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┐
     * │ Q │ W │ E │ R │ T │         │ Y │ U │ I │ O │ P │
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │ A │ S │ D │ F │ G │         │ H │ J │ K │ L │ ;:│
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │⇧/Z│ X │ C │ V │ B │         │ N │ M │ ,<│ .>│⇧/?│
     * └───┴───┴───┴───┴───┘         └───┴───┴───┴───┴───┘
     *             ┌───┬───┬───┐ ┌───┬───┬───┐
     *             │CTL│CMD│SPC│ │ENT│CMD│OPT│
     *             └───┴───┴───┘ └───┴───┴───┘
     */
    [_BASE] = LAYOUT_split_3x5_3(
        KC_Q,     KC_W, KC_E,       KC_R,       KC_T,       KC_Y,        KC_U,       KC_I,    KC_O,   KC_P,
        KC_NAV_A, KC_S, KC_D,       KC_F,       KC_G,       KC_H,        KC_J,       KC_K,    KC_L,   KC_SCLN,
        KC_SFT_Z, KC_X, KC_C,       KC_V,       KC_B,       KC_N,        KC_M,       KC_COMM, KC_DOT, KC_SFT_SL,
                        KC_CTL_ESC, KC_CMD_TAB, KC_LWR_SPC, KC_RSE_BSPC, KC_CMD_ENT, KC_ROPT
    ),

    /*
     * ┌───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┐
     * │ 1!│ 2@│ 3#│ 4$│ 5%│         │ 6^│ 7&│ 8*│ 9(│ 0)│
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │ `~│   │   │   │   │         │ ← │ ↓ │ ↑ │ → │ '"│
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │ ⇧ │   │   │   │   │         │ -_│ =+│ [{│ ]}│ \|│
     * └───┴───┴───┴───┴───┘         └───┴───┴───┴───┴───┘
     *             ┌───┬───┬───┐ ┌───┬───┬───┐
     *             │   │   │   │ │   │   │   │
     *             └───┴───┴───┘ └───┴───┴───┘
     */
    [_LOWER] = LAYOUT_split_3x5_3(
        KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,     KC_0,
        KC_GRV,  _______, _______, _______, _______, KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT, KC_QUOT,
        KC_LSFT, _______, _______, _______, _______, KC_MINS, KC_EQL,  KC_LBRC, KC_RBRC,  KC_SFT_BSLS,
                          _______, _______, _______, _______, _______, _______
    ),

    /*
     * ┌───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┐
     * │ F1│ F2│ F3│ F4│ F5│         │ F6│ F7│ F8│ F9│F10│
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │   │   │   │   │   │         │   │   │   │   │   │
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │   │   │   │   │   │         │   │   │   │   │   │
     * └───┴───┴───┴───┴───┘         └───┴───┴───┴───┴───┘
     *             ┌───┬───┬───┐ ┌───┬───┬───┐
     *             │   │   │   │ │   │   │   │
     *             └───┴───┴───┘ └───┴───┴───┘
     */
    [_RAISE] = LAYOUT_split_3x5_3(
        KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
                          _______, _______, _______, _______, _______, _______
    ),

    /*
     * ┌───┬───┬───┬───┬───┐         ┌───┬───┬───┬───┬───┐
     * │   │   │   │   │   │         │HOM│   │   │END│   │
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │   │   │   │   │   │         │ ← │ ↓ │ ↑ │ → │   │
     * ├───┼───┼───┼───┼───┤         ├───┼───┼───┼───┼───┤
     * │   │   │   │   │   │         │PUP│   │   │PDN│   │
     * └───┴───┴───┴───┴───┘         └───┴───┴───┴───┴───┘
     *             ┌───┬───┬───┐ ┌───┬───┬───┐
     *             │   │   │   │ │   │   │   │
     *             └───┴───┴───┘ └───┴───┴───┘
     */
    [_NAV] = LAYOUT_split_3x5_3(
        _______, _______, _______, _______, _______, KC_HOME, _______, _______, KC_END,   _______,
        _______, _______, _______, _______, _______, KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT, _______,
        _______, _______, _______, _______, _______, KC_PGUP, _______, _______, KC_PGDN,  _______,
                          _______, _______, _______, _______, _______, _______
    )
};
```
{: file="keymaps/default/keymap.c"}

As a bonus point I've created PR into QMK repository to add my keyboard.
That was approved and officially added to the QMK firmware.

### Layout design

I had troubles to use Planck default layout, so I decided to create my own layout.

![Layout](/assets/img/franky36/keymap.png)

Still work in progress, very often I'm pressing backspace instead of space.
Maybe I should swap them.

### Links

- [franky36](https://github.com/avdyushin/franky36)
- [QMK](https://browse.qmk.fm/#/keyboard/handwired/franky36)
- [QMK Configurator](https://config.qmk.fm/#/handwired/franky36/LAYOUT)
